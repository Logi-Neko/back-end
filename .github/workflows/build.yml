# T√™n file: .github/workflows/build.yml

name: Build on GitHub, Deploy on Windows

on:
  push:
    branches:
      - main # Ho·∫∑c nh√°nh b·∫°n mu·ªën d√πng

jobs:
  # ----------------------------------------------------------------
  # JOB 1: BUILD TR√äN M√ÅY ·∫¢O C·ª¶A GITHUB (UBUNTU)
  # ----------------------------------------------------------------
  build-and-push-image:
    runs-on: ubuntu-latest # Ch·∫°y tr√™n m√°y ch·ªß c·ªßa GitHub, r·∫•t nhanh v√† m·∫°nh
    steps:
      # üß© 1. L·∫•y code t·ª´ branch
      - name: Checkout code
        uses: actions/checkout@v4

      # ‚òï 2. C√†i Java 21 v√† Maven
      - name: Set up JDK 21 and Maven
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          maven-version: '3.9.8'

      # ‚öôÔ∏è 3. Build project b·∫±ng Maven
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # üîê 4. ƒêƒÉng nh·∫≠p v√†o Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }} # C·∫ßn t·∫°o secret n√†y
          password: ${{ secrets.DOCKERHUB_TOKEN }}   # C·∫ßn t·∫°o secret n√†y

      # üê≥ 5. Build v√† ƒë·∫©y Docker image l√™n Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: . # L·∫•y Dockerfile t·ª´ th∆∞ m·ª•c g·ªëc
          push: true
          # üëá THAY TH·∫æ 'your-username/logineko-be' b·∫±ng t√™n c·ªßa b·∫°n
          tags: alfred0324/logineko-be:latest

  # ----------------------------------------------------------------
  # JOB 2: DEPLOY TR√äN M√ÅY WINDOWS 11 C·ª¶A B·∫†N
  # ----------------------------------------------------------------
  deploy-on-windows:
    runs-on: self-hosted # Ch·∫°y tr√™n runner b·∫°n ƒë√£ c√†i ƒë·∫∑t
    needs: build-and-push-image # Ph·∫£i ch·ªù job 1 th√†nh c√¥ng
    steps:
      # üß© 1. L·∫•y code t·ª´ branch (ƒë·ªÉ c√≥ file docker-compose.yml)
      - name: Checkout code
        uses: actions/checkout@v4

      # üîê 2. T·∫°o file .env t·ª´ secrets (d√πng PowerShell c√≥ s·∫µn c·ªßa Windows)
      - name: Create .env file
        shell: powershell # ƒê·ªïi t·ª´ pwsh th√†nh powershell
        run: |
          @"
          KEYCLOAK_CLIENT_SECRET=${{ secrets.KEYCLOAK_CLIENT_SECRET }}
          KEYCLOAK_URL=${{ secrets.KEYCLOAK_URL }}
          KEYCLOAK_URL_WEB=${{ secrets.KEYCLOAK_URL_WEB }}
          KEYCLOAK_CLIENT_ID=${{ secrets.KEYCLOAK_CLIENT_ID }}
          KEYCLOAK_REALM=${{ secrets.KEYCLOAK_REALM }}
          kafka_server=${{ secrets.KAFKA_SERVER }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          REDIRECT_URI=${{ secrets.REDIRECT_URI }}
          REDIRECT_URI_WEB=${{ secrets.REDIRECT_URI_WEB }}
          POSTGRES_PASSWORD_KEYCLOAK=${{ secrets.POSTGRES_PASSWORD_KEYCLOAK }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          PAYOS_CLIENT_ID=${{ secrets.PAYOS_CLIENT_ID }}
          PAYOS_API_KEY=${{ secrets.PAYOS_API_KEY }}
          PAYOS_CHECKSUM_KEY=${{ secrets.PAYOS_CHECKSUM_KEY }}
          PAYOS_BASE_URL=${{ secrets.PAYOS_BASE_URL }}
          PAYOS_SUCCESS_PAGE=${{ secrets.PAYOS_SUCCESS_PAGE }}
          PAYOS_FAILURE_PAGE=${{ secrets.PAYOS_FAILURE_PAGE }}
          "@ | Out-File -FilePath .env -Encoding utf8

      # üöÄ 3. K√©o image m·ªõi v√† kh·ªüi ƒë·ªông l·∫°i container
      - name: Pull image and restart services
        shell: powershell # ƒê·ªïi t·ª´ pwsh th√†nh powershell
        run: |
          echo "üöÄ Starting deployment on Windows..."
          
          echo "üê≥ Pulling latest image from Docker Hub..."
          # L·ªánh pull s·∫Ω t·ª± ƒë·ªông k√©o image ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong docker-compose.yml
          docker compose pull
          
          echo "üèóÔ∏è Recreating containers with the new image..."
          # L·ªánh up s·∫Ω ch·ªâ t·∫°o l·∫°i c√°c service c√≥ image m·ªõi
          docker compose up -d --force-recreate
          
          echo "‚úÖ Deployment completed!"