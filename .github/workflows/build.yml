name: Test SSH Connection

on:
  workflow_dispatch:  # Ch·∫°y th·ªß c√¥ng t·ª´ GitHub UI
  push:
    branches:
      - test-ssh  # Ho·∫∑c t·∫°o branch test ri√™ng

jobs:
  test-connection:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Test c∆° b·∫£n - Ping server
      - name: Test 1 - Check if server is reachable
        run: |
          echo "üîç Testing connection to ${{ secrets.VPS_IP }}:2222"
          nc -zv ${{ secrets.VPS_IP }} 2222 || echo "‚ùå Port 2222 kh√¥ng truy c·∫≠p ƒë∆∞·ª£c"

      # 2Ô∏è‚É£ Test SSH key format
      - name: Test 2 - Verify SSH key format
        run: |
          echo "üîë Checking SSH key format..."
          echo "${{ secrets.VPS_SSH_KEY }}" > /tmp/test_key
          
          # Ki·ªÉm tra key c√≥ ƒë√∫ng format kh√¥ng
          if grep -q "BEGIN.*PRIVATE KEY" /tmp/test_key; then
            echo "‚úÖ SSH key c√≥ header h·ª£p l·ªá"
          else
            echo "‚ùå SSH key thi·∫øu header!"
          fi
          
          if grep -q "END.*PRIVATE KEY" /tmp/test_key; then
            echo "‚úÖ SSH key c√≥ footer h·ª£p l·ªá"
          else
            echo "‚ùå SSH key thi·∫øu footer!"
          fi
          
          # ƒê·∫øm s·ªë d√≤ng
          LINES=$(wc -l < /tmp/test_key)
          echo "üìä SSH key c√≥ $LINES d√≤ng"
          
          rm /tmp/test_key

      # 3Ô∏è‚É£ Test SSH connection v·ªõi verbose mode
      - name: Test 3 - SSH connection with verbose output
        continue-on-error: true
        run: |
          echo "üîê Testing SSH connection v·ªõi verbose mode..."
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Th√™m host v√†o known_hosts
          ssh-keyscan -p 2222 ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts 2>&1 || echo "‚ö†Ô∏è ssh-keyscan failed"
          
          # Test k·∫øt n·ªëi v·ªõi verbose
          ssh -vvv -p 2222 -i ~/.ssh/id_rsa \
            -o StrictHostKeyChecking=no \
            -o ConnectTimeout=30 \
            -o ServerAliveInterval=10 \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }} \
            "echo '‚úÖ SSH connection successful!'; whoami; pwd" 2>&1 | tee ssh_debug.log
          
          echo "üìã SSH debug log saved"

      # 4Ô∏è‚É£ Test v·ªõi appleboy/ssh-action (action b·∫°n ƒëang d√πng)
      - name: Test 4 - Using appleboy/ssh-action
        uses: appleboy/ssh-action@v1.2.0
        continue-on-error: true
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 2222
          debug: true
          command_timeout: 30s
          script: |
            echo "‚úÖ SSH via appleboy/ssh-action th√†nh c√¥ng!"
            echo "User: $(whoami)"
            echo "Home: $HOME"
            echo "Current dir: $(pwd)"
            echo "Disk space:"
            df -h | head -5
            echo "Docker status:"
            docker --version || echo "Docker ch∆∞a c√†i"

      # 5Ô∏è‚É£ Test SCP action
      - name: Test 5 - Create test file
        run: |
          echo "Test file from GitHub Actions" > test-file.txt
          date >> test-file.txt

      - name: Test 6 - Using appleboy/scp-action
        uses: appleboy/scp-action@v0.1.7
        continue-on-error: true
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 2222
          debug: true
          timeout: 60s
          command_timeout: 30s
          source: "test-file.txt"
          target: "/home/${{ secrets.VPS_USER }}/test-upload"

      # 6Ô∏è‚É£ Verify file uploaded
      - name: Test 7 - Verify uploaded file
        uses: appleboy/ssh-action@v1.2.0
        continue-on-error: true
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 2222
          script: |
            echo "üìÅ Checking uploaded file..."
            if [ -f "/home/${{ secrets.VPS_USER }}/test-upload/test-file.txt" ]; then
              echo "‚úÖ File uploaded successfully!"
              cat "/home/${{ secrets.VPS_USER }}/test-upload/test-file.txt"
            else
              echo "‚ùå File upload failed"
              ls -la /home/${{ secrets.VPS_USER }}/
            fi

      # 7Ô∏è‚É£ Test multiple connections (gi·∫£ l·∫≠p real scenario)
      - name: Test 8 - Multiple sequential connections
        run: |
          echo "üîÑ Testing multiple connections..."
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p 2222 ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts 2>&1
          
          for i in {1..3}; do
            echo "üîó Connection attempt $i/3"
            ssh -p 2222 -i ~/.ssh/id_rsa \
              -o StrictHostKeyChecking=no \
              -o ConnectTimeout=30 \
              ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }} \
              "echo 'Connection $i successful'" || echo "‚ùå Connection $i failed"
            sleep 2
          done

      # 8Ô∏è‚É£ Summary
      - name: Test Summary
        if: always()
        run: |
          echo "=================================="
          echo "üìä TEST SUMMARY"
          echo "=================================="
          echo "Host: ${{ secrets.VPS_IP }}"
          echo "Port: 2222"
          echo "User: ${{ secrets.VPS_USER }}"
          echo ""
          echo "‚úÖ N·∫øu t·∫•t c·∫£ test pass = SSH ho·∫°t ƒë·ªông t·ªët"
          echo "‚ùå N·∫øu c√≥ test fail = c·∫ßn check log chi ti·∫øt"
          echo "=================================="