name: Build and Deploy LogiNeko

on:
  push:
    branches:
      - cicd

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 🧩 1. Lấy code từ branch
      - name: Checkout code
        uses: actions/checkout@v4

      # ☕ 2. Cài Java 21 (Temurin)
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # ⚙️ 3. Build project bằng Maven
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # 🔐 4. Tạo file .env từ secrets GitHub
      - name: Create .env file
        run: |
          cat > .env <<EOF
          KEYCLOAK_CLIENT_SECRET=${{ secrets.KEYCLOAK_CLIENT_SECRET }}
          KEYCLOAK_URL=${{ secrets.KEYCLOAK_URL }}
          KEYCLOAK_URL_WEB=${{ secrets.KEYCLOAK_URL_WEB }}
          KEYCLOAK_CLIENT_ID=${{ secrets.KEYCLOAK_CLIENT_ID }}
          KEYCLOAK_REALM=${{ secrets.KEYCLOAK_REALM }}
          kafka_server=${{ secrets.KAFKA_SERVER }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          REDIRECT_URI=${{ secrets.REDIRECT_URI }}
          REDIRECT_URI_WEB=${{ secrets.REDIRECT_URI_WEB }}
          POSTGRES_PASSWORD_KEYCLOAK=${{ secrets.POSTGRES_PASSWORD_KEYCLOAK }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          PAYOS_CLIENT_ID=${{ secrets.PAYOS_CLIENT_ID }}
          PAYOS_API_KEY=${{ secrets.PAYOS_API_KEY }}
          PAYOS_CHECKSUM_KEY=${{ secrets.PAYOS_CHECKSUM_KEY }}
          PAYOS_BASE_URL=${{ secrets.PAYOS_BASE_URL }}
          PAYOS_SUCCESS_PAGE=${{ secrets.PAYOS_SUCCESS_PAGE }}
          PAYOS_FAILURE_PAGE=${{ secrets.PAYOS_FAILURE_PAGE }}
          EOF

      # 🧪 Test SSH connection first
      - name: Test SSH Connection
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 2222
          timeout: 30s
          command_timeout: 10s
          script: |
            echo "✅ SSH connection successful!"
            whoami
            pwd
            df -h

      # 📤 Upload files với retry logic
      - name: Upload build files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 2222
          timeout: 300s
          command_timeout: 120s
          use_insecure_cipher: false
          rm: true
          debug: true
          overwrite: true
          source: "target/*.jar,.env,docker-compose.yml"
          target: "/home/${{ secrets.VPS_USER }}/logineko"

      # 🛑 Wait before deployment
      - name: Wait before deploy
        run: sleep 10

      # 🚀 Deploy with better error handling
      - name: Deploy on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 2222
          timeout: 600s
          command_timeout: 15m
          script: |
            set -e
            echo "🚀 Starting deployment on VPS..."
            
            # Navigate to project directory
            cd /home/${{ secrets.VPS_USER }}/logineko || exit 1
            
            # Check if files were uploaded successfully
            echo "📁 Checking uploaded files..."
            ls -la
            
            # Ensure Docker is running
            if ! systemctl is-active --quiet docker; then
              echo "🔧 Starting Docker service..."
              sudo systemctl start docker
              sleep 5
            fi
            
            # Stop existing containers gracefully
            echo "🛑 Stopping existing containers..."
            docker compose down --timeout 30 || true
            
            # Clean up old images to free space
            echo "🧹 Cleaning up Docker resources..."
            docker system prune -f || true
            
            # Build and start new containers
            echo "🏗️ Building and starting containers..."
            docker compose up -d --build --force-recreate
            
            # Wait for containers to be ready
            echo "⏳ Waiting for containers to start..."
            sleep 30
            
            # Check container status
            echo "📊 Container status:"
            docker compose ps
            
            # Check logs for any immediate errors
            echo "📋 Recent logs:"
            docker compose logs --tail=20
            
            echo "✅ Deployment completed successfully!"
