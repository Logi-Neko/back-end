spring:
  application:
    name: LogiNeko

  servlet:
    multipart:
      max-file-size: 50MB
      max-request-size: 100MB

  messages:
    basename: messages
    encoding: UTF-8

  datasource:
#    url: jdbc:postgresql://ep-noisy-wave-a1gc5pap-pooler.ap-southeast-1.aws.neon.tech/neondb?user=${POSTGRES_USER}&password=${POSTGRES_PASSWORD}&sslmode=require&channelBinding=require
#    url: jdbc:postgresql://postgres:5432/logineko_be
    url: jdbc:postgresql://ep-twilight-pine-a1iw9jt5-pooler.ap-southeast-1.aws.neon.tech/neondb?user=${POSTGRES_USER}&password=${POSTGRES_PASSWORD}&sslmode=require&channelBinding=require
    hikari:
      maximum-pool-size: 5
      minimum-idle: 1
      idle-timeout: 10000
      max-lifetime: 30000
      connection-timeout: 30000
      keepalive-time: 15000
      validation-timeout: 5000
      connection-test-query: SELECT 1
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
      format_sql: true
    database-platform: org.hibernate.dialect.PostgreSQLDialect

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${KEYCLOAK_URL_WEB}/realms/${keycloak.realm}

  kafka:
    bootstrap-servers: kafka:9092
    producer:
        key-serializer: org.apache.kafka.common.serialization.StringSerializer
        value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

    consumer:
        group-id: quiz-consumer-group
        auto-offset-reset: earliest
        key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
        properties:
          spring.json.trusted.packages: "*"
          spring.json.value.default.type: exe2.learningapp.logineko.quizziz.dto.GameEventDTO

    listener:
        missing-topics-fatal: false


server:
  port: 8081
  address: 0.0.0.0

idp:
  url: ${KEYCLOAK_URL_WEB}

keycloak:
  auth-server-url: ${KEYCLOAK_URL}
  auth-server: ${KEYCLOAK_URL_WEB}
  realm: ${KEYCLOAK_REALM}
  resource: ${KEYCLOAK_CLIENT_ID}
  credentials:
    secret: ${KEYCLOAK_CLIENT_SECRET}

google:
  oauth:
    client-id: ${GOOGLE_CLIENT_ID}
    client-secret: ${GOOGLE_CLIENT_SECRET}

app:
  jwt-secret: ${JWT_SECRET}
  redirect-uri: ${REDIRECT_URI}
  redirect-uri-web: ${REDIRECT_URI_WEB}

payos:
  client-id: ${PAYOS_CLIENT_ID}
  api-key: ${PAYOS_API_KEY}
  checksum-key: ${PAYOS_CHECKSUM_KEY}
  base-url: ${PAYOS_BASE_URL}
  success-page: ${PAYOS_SUCCESS_PAGE}
  failure-page: ${PAYOS_FAILURE_PAGE}

springdoc:
  swagger-ui:
    oauth:
      client-id: ${KEYCLOAK_CLIENT_ID}
      client-secret: ${KEYCLOAK_CLIENT_SECRET}
      use-pkce-with-authorization-code-grant: true  # Bảo mật hơn
