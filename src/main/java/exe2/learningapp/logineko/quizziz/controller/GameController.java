 package exe2.learningapp.logineko.quizziz.controller;

import exe2.learningapp.logineko.quizziz.dto.ContestDTO;
import exe2.learningapp.logineko.quizziz.dto.LeaderBoardDTO;
import exe2.learningapp.logineko.quizziz.service.ContestService;
import exe2.learningapp.logineko.quizziz.service.ContestQuestionService;
import exe2.learningapp.logineko.quizziz.service.LeaderBoardService;
import exe2.learningapp.logineko.quizziz.service.ParticipantService;
import exe2.learningapp.logineko.quizziz.service.kafka.EventProducer;
import exe2.learningapp.logineko.quizziz.service.kafka.processor.ContestStateManager;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/game")
@RequiredArgsConstructor
@Slf4j
@Tag(name = "Game Management", description = "API qu·∫£n l√Ω game v√† contest online real-time")
public class GameController {

    private final EventProducer eventProducer;
    private final ContestService contestService;
    private final ContestQuestionService contestQuestionService;
    private final ParticipantService participantService;
    private final LeaderBoardService leaderBoardService;
    private final ContestStateManager contestStateManager;

    // ==================== CONTEST LIFECYCLE ====================
    
    @PostMapping("/create")
    @Operation(summary = "T·∫°o contest m·ªõi", description = "T·∫°o contest m·ªõi v√† publish event ƒë·ªÉ kh·ªüi t·∫°o h·ªá th·ªëng")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "T·∫°o contest th√†nh c√¥ng"),
        @ApiResponse(responseCode = "400", description = "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá"),
        @ApiResponse(responseCode = "500", description = "L·ªói server")
    })
    public ResponseEntity<?> createContest(@Valid @RequestBody ContestDTO.ContestRequest request) {
        log.info("üéØ Creating contest with title: {}", request.title());
        
        try {
            // T·∫°o contest trong database
            ContestDTO.ContestResponse contest = contestService.create(request);
            
            // Publish contest created event
            eventProducer.publishContestCreated(contest.id());
            
            log.info("‚úÖ Contest created successfully with ID: {} and code: {}", contest.id(), contest.code());
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "Contest created successfully",
                "data", contest
            ));
            
        } catch (Exception e) {
            log.error("‚ùå Error creating contest: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(Map.of("success", false, "message", "Error creating contest: " + e.getMessage()));
        }
    }
    
    @PostMapping("/{contestId}/start")
    @Operation(summary = "B·∫Øt ƒë·∫ßu contest", description = "B·∫Øt ƒë·∫ßu contest v√† kh·ªüi t·∫°o leaderboard")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "B·∫Øt ƒë·∫ßu contest th√†nh c√¥ng"),
        @ApiResponse(responseCode = "404", description = "Contest kh√¥ng t·ªìn t·∫°i"),
        @ApiResponse(responseCode = "400", description = "Contest kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu"),
        @ApiResponse(responseCode = "500", description = "L·ªói server")
    })
    public ResponseEntity<?> startContest(@PathVariable Long contestId) {
        log.info("üöÄ Starting contest with ID: {}", contestId);
        
        try {
            // Validate contest exists and can be started
            var contestOpt = contestService.findById(contestId);
            if (contestOpt.isEmpty()) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(Map.of("success", false, "message", "Contest not found"));
            }
            
            var contest = contestOpt.get();
            
            // Check if contest is in correct state to start
            if (!"OPEN".equals(contest.status().toString())) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(Map.of("success", false, "message", "Contest is not in OPEN state, current state: " + contest.status()));
            }
            
            // Check if contest has questions
            var questions = contestQuestionService.findByContest(contestId);
            if (questions.isEmpty()) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(Map.of("success", false, "message", "Contest has no questions"));
            }
            
            // Publish contest started event
            eventProducer.publishContestStarted(contestId);
            
            log.info("‚úÖ Contest {} started successfully with {} questions", contestId, questions.size());
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "Contest started successfully",
                "data", Map.of(
                    "contestId", contestId,
                    "totalQuestions", questions.size(),
                    "status", "RUNNING"
                )
            ));
            
        } catch (Exception e) {
            log.error("‚ùå Error starting contest {}: {}", contestId, e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(Map.of("success", false, "message", "Error starting contest: " + e.getMessage()));
        }
    }

    // ==================== QUESTION MANAGEMENT ====================
    
    @PostMapping("/reveal/{contestQuestionId}")
    @Operation(summary = "Hi·ªÉn th·ªã c√¢u h·ªèi", description = "Hi·ªÉn th·ªã c√¢u h·ªèi cho t·∫•t c·∫£ participants trong contest")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Hi·ªÉn th·ªã c√¢u h·ªèi th√†nh c√¥ng"),
        @ApiResponse(responseCode = "404", description = "C√¢u h·ªèi kh√¥ng t·ªìn t·∫°i"),
        @ApiResponse(responseCode = "400", description = "Contest ch∆∞a b·∫Øt ƒë·∫ßu"),
        @ApiResponse(responseCode = "500", description = "L·ªói server")
    })
    public ResponseEntity<?> revealQuestion(@PathVariable Long contestQuestionId) {
        log.info("üìù Revealing question {} for contest", contestQuestionId);
        
        try {
            // Validate contest question exists
            var contestQuestionOpt = contestQuestionService.findById(contestQuestionId);
            if (contestQuestionOpt.isEmpty()) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(Map.of("success", false, "message", "Contest question not found"));
            }
            
            var contestQuestion = contestQuestionOpt.get();
            Long contestId = contestQuestion.contestId();
            
            // Check if contest is running
            var contestState = contestStateManager.getContestState(contestId);
            if (contestState == null || !"RUNNING".equals(contestState.getStatus())) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(Map.of("success", false, "message", "Contest is not running"));
            }
            
            // Publish question revealed event
            eventProducer.publishQuestionRevealed(contestQuestionId);
            
            log.info("‚úÖ Question {} revealed successfully for contest {}", contestQuestionId, contestId);
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "Question revealed successfully",
                "data", Map.of(
                    "contestQuestionId", contestQuestionId,
                    "contestId", contestId,
                    "questionIndex", contestQuestion.index()
                )
            ));
            
        } catch (Exception e) {
            log.error("‚ùå Error revealing question {}: {}", contestQuestionId, e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(Map.of("success", false, "message", "Error revealing question: " + e.getMessage()));
        }
    }

    @PostMapping("/end-question/{contestQuestionId}")
    @Operation(summary = "K·∫øt th√∫c c√¢u h·ªèi", description = "K·∫øt th√∫c c√¢u h·ªèi, hi·ªÉn th·ªã ƒë√°p √°n ƒë√∫ng v√† t√≠nh ƒëi·ªÉm")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "K·∫øt th√∫c c√¢u h·ªèi th√†nh c√¥ng"),
        @ApiResponse(responseCode = "404", description = "C√¢u h·ªèi kh√¥ng t·ªìn t·∫°i"),
        @ApiResponse(responseCode = "500", description = "L·ªói server")
    })
    public ResponseEntity<?> endQuestion(@PathVariable Long contestQuestionId) {
        log.info("‚è∞ Ending question {}", contestQuestionId);
        
        try {
            // Validate contest question exists
            var contestQuestionOpt = contestQuestionService.findById(contestQuestionId);
            if (contestQuestionOpt.isEmpty()) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(Map.of("success", false, "message", "Contest question not found"));
            }
            
            var contestQuestion = contestQuestionOpt.get();
            Long contestId = contestQuestion.contestId();
            
            // Publish question ended event (this will calculate scores)
            eventProducer.publishQuestionEnded(contestQuestionId);
            
            log.info("‚úÖ Question {} ended successfully for contest {}", contestQuestionId, contestId);
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "Question ended successfully",
                "data", Map.of(
                    "contestQuestionId", contestQuestionId,
                    "contestId", contestId
                )
            ));
            
        } catch (Exception e) {
            log.error("‚ùå Error ending question {}: {}", contestQuestionId, e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(Map.of("success", false, "message", "Error ending question: " + e.getMessage()));
        }
    }

    // ==================== ANSWER SUBMISSION ====================
    
    @PostMapping("/{contestId}/submit/{participantId}/{contestQuestionId}")
    @Operation(summary = "N·ªôp c√¢u tr·∫£ l·ªùi", description = "N·ªôp c√¢u tr·∫£ l·ªùi cho c√¢u h·ªèi v√† t√≠nh ƒëi·ªÉm real-time")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "N·ªôp c√¢u tr·∫£ l·ªùi th√†nh c√¥ng"),
        @ApiResponse(responseCode = "404", description = "Participant ho·∫∑c c√¢u h·ªèi kh√¥ng t·ªìn t·∫°i"),
        @ApiResponse(responseCode = "400", description = "Contest kh√¥ng ƒëang ch·∫°y ho·∫∑c ƒë√£ n·ªôp r·ªìi"),
        @ApiResponse(responseCode = "500", description = "L·ªói server")
    })
    public ResponseEntity<?> submitAnswer(
            @PathVariable Long contestId, 
            @PathVariable Long participantId,
            @PathVariable Long contestQuestionId, 
            @RequestParam String answer,
            @RequestParam(required = false) Integer timeSpent) {
        
        log.info("üì§ Submitting answer for participant {} in contest {} for question {}", 
            participantId, contestId, contestQuestionId);
        
        try {
            // Validate contest is running
            var contestState = contestStateManager.getContestState(contestId);
            if (contestState == null || !"RUNNING".equals(contestState.getStatus())) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(Map.of("success", false, "message", "Contest is not running"));
            }
            
            // Validate participant exists
            var participantOpt = participantService.findById(participantId);
            if (participantOpt.isEmpty()) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(Map.of("success", false, "message", "Participant not found"));
            }
            
            // Validate contest question exists
            var contestQuestionOpt = contestQuestionService.findById(contestQuestionId);
            if (contestQuestionOpt.isEmpty()) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(Map.of("success", false, "message", "Contest question not found"));
            }
            
            // Validate answer is not empty
            if (answer == null || answer.trim().isEmpty()) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(Map.of("success", false, "message", "Answer cannot be empty"));
            }
            
            // Publish answer submitted event with timeSpent (but don't calculate score yet)
            eventProducer.publishAnswerSubmitted(contestId, participantId, contestQuestionId, answer.trim(), timeSpent);
            
            log.info("‚úÖ Answer submitted successfully for participant {} in contest {}", participantId, contestId);
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "Answer submitted successfully",
                "data", Map.of(
                    "contestId", contestId,
                    "participantId", participantId,
                    "contestQuestionId", contestQuestionId,
                    "submittedAt", System.currentTimeMillis()
                )
            ));
            
        } catch (Exception e) {
            log.error("‚ùå Error submitting answer for participant {} in contest {}: {}", 
                participantId, contestId, e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(Map.of("success", false, "message", "Error submitting answer: " + e.getMessage()));
        }
    }

    // ==================== PARTICIPANT MANAGEMENT ====================
    
    @PostMapping("/{contestId}/join")
    @Operation(summary = "Tham gia contest", description = "Tham gia contest v√† kh·ªüi t·∫°o participant trong leaderboard")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Tham gia contest th√†nh c√¥ng"),
        @ApiResponse(responseCode = "404", description = "Contest kh√¥ng t·ªìn t·∫°i"),
        @ApiResponse(responseCode = "400", description = "Contest ƒë√£ b·∫Øt ƒë·∫ßu ho·∫∑c ƒë√£ tham gia"),
        @ApiResponse(responseCode = "500", description = "L·ªói server")
    })
    public ResponseEntity<?> joinContest(@PathVariable Long contestId, @RequestParam Long accountId) {
        log.info("üë§ Account {} joining contest {}", accountId, contestId);
        
        try {
            // Validate contest exists
            var contestOpt = contestService.findById(contestId);
            if (contestOpt.isEmpty()) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(Map.of("success", false, "message", "Contest not found"));
            }
            
            var contest = contestOpt.get();
            
            // Check if contest is still open for joining
            if (!"OPEN".equals(contest.status().toString())) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(Map.of("success", false, "message", "Contest is not open for joining, current state: " + contest.status()));
            }
            
            // Publish participant created event (EventProducer will handle participant creation)
            eventProducer.publishParticipantCreated(contestId, accountId);
            
            log.info("‚úÖ Account {} joined contest {} successfully", accountId, contestId);
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "Joined contest successfully",
                "data", Map.of(
                    "contestId", contestId,
                    "accountId", accountId,
                    "contestTitle", contest.title(),
                    "contestCode", contest.code()
                )
            ));
            
        } catch (Exception e) {
            log.error("‚ùå Error joining contest {} for account {}: {}", contestId, accountId, e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(Map.of("success", false, "message", "Error joining contest: " + e.getMessage()));
        }
    }

    @PostMapping("/{contestId}/end")
    @Operation(summary = "K·∫øt th√∫c contest", description = "K·∫øt th√∫c contest v√† finalize leaderboard")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "K·∫øt th√∫c contest th√†nh c√¥ng"),
        @ApiResponse(responseCode = "404", description = "Contest kh√¥ng t·ªìn t·∫°i"),
        @ApiResponse(responseCode = "400", description = "Contest ch∆∞a b·∫Øt ƒë·∫ßu ho·∫∑c ƒë√£ k·∫øt th√∫c"),
        @ApiResponse(responseCode = "500", description = "L·ªói server")
    })
    public ResponseEntity<?> endContest(@PathVariable Long contestId) {
        log.info("üèÅ Ending contest with ID: {}", contestId);
        
        try {
            // Validate contest exists
            var contestOpt = contestService.findById(contestId);
            if (contestOpt.isEmpty()) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(Map.of("success", false, "message", "Contest not found"));
            }
            
            // Check if contest is running
            var contestState = contestStateManager.getContestState(contestId);
            if (contestState == null || !"RUNNING".equals(contestState.getStatus())) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(Map.of("success", false, "message", "Contest is not running"));
            }
            
            // Publish contest ended event
            eventProducer.publishContestEnded(contestId);
            
            log.info("‚úÖ Contest {} ended successfully", contestId);
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "Contest ended successfully",
                "data", Map.of(
                    "contestId", contestId,
                    "endedAt", System.currentTimeMillis()
                )
            ));
            
        } catch (Exception e) {
            log.error("‚ùå Error ending contest {}: {}", contestId, e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(Map.of("success", false, "message", "Error ending contest: " + e.getMessage()));
        }
    }

    // ==================== LEADERBOARD MANAGEMENT ====================
    
    @PostMapping("/{contestId}/leaderboard/refresh")
    @Operation(summary = "L√†m m·ªõi b·∫£ng x·∫øp h·∫°ng", description = "K√≠ch ho·∫°t l√†m m·ªõi b·∫£ng x·∫øp h·∫°ng real-time")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "L√†m m·ªõi leaderboard th√†nh c√¥ng"),
        @ApiResponse(responseCode = "404", description = "Contest kh√¥ng t·ªìn t·∫°i"),
        @ApiResponse(responseCode = "500", description = "L·ªói server")
    })
    public ResponseEntity<?> refreshLeaderboard(@PathVariable Long contestId) {
        log.info("üîÑ Refreshing leaderboard for contest: {}", contestId);
        
        try {
            // Validate contest exists
            var contestOpt = contestService.findById(contestId);
            if (contestOpt.isEmpty()) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(Map.of("success", false, "message", "Contest not found"));
            }
            
            // Publish leaderboard refresh event
            eventProducer.publishLeaderboardRefresh(contestId);
            
            log.info("‚úÖ Leaderboard refresh triggered for contest {}", contestId);
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "Leaderboard refresh triggered successfully",
                "data", Map.of(
                    "contestId", contestId,
                    "refreshedAt", System.currentTimeMillis()
                )
            ));
            
        } catch (Exception e) {
            log.error("‚ùå Error refreshing leaderboard for contest {}: {}", contestId, e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(Map.of("success", false, "message", "Error refreshing leaderboard: " + e.getMessage()));
        }
    }
    
    @GetMapping("/{contestId}/leaderboard")
    @Operation(summary = "L·∫•y b·∫£ng x·∫øp h·∫°ng", description = "L·∫•y b·∫£ng x·∫øp h·∫°ng hi·ªán t·∫°i c·ªßa contest")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "L·∫•y leaderboard th√†nh c√¥ng"),
        @ApiResponse(responseCode = "404", description = "Contest kh√¥ng t·ªìn t·∫°i"),
        @ApiResponse(responseCode = "500", description = "L·ªói server")
    })
    public ResponseEntity<?> getLeaderboard(@PathVariable Long contestId) {
        log.info("üìä Getting leaderboard for contest: {}", contestId);
        
        try {
            // Validate contest exists
            var contestOpt = contestService.findById(contestId);
            if (contestOpt.isEmpty()) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(Map.of("success", false, "message", "Contest not found"));
            }
            
            // Get leaderboard
            List<LeaderBoardDTO.LeaderBoardResponse> leaderboard = leaderBoardService.getLeaderboard(contestId);
            
            log.info("‚úÖ Retrieved leaderboard for contest {} with {} participants", contestId, leaderboard.size());
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "Leaderboard retrieved successfully",
                "data", Map.of(
                    "contestId", contestId,
                    "leaderboard", leaderboard,
                    "totalParticipants", leaderboard.size()
                )
            ));
            
        } catch (Exception e) {
            log.error("‚ùå Error getting leaderboard for contest {}: {}", contestId, e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(Map.of("success", false, "message", "Error getting leaderboard: " + e.getMessage()));
        }
    }
    
    // ==================== CONTEST STATUS ====================
    
    @GetMapping("/{contestId}/status")
    @Operation(summary = "L·∫•y tr·∫°ng th√°i contest", description = "L·∫•y tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa contest")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "L·∫•y tr·∫°ng th√°i th√†nh c√¥ng"),
        @ApiResponse(responseCode = "404", description = "Contest kh√¥ng t·ªìn t·∫°i"),
        @ApiResponse(responseCode = "500", description = "L·ªói server")
    })
    public ResponseEntity<?> getContestStatus(@PathVariable Long contestId) {
        log.info("üìã Getting status for contest: {}", contestId);
        
        try {
            // Validate contest exists
            var contestOpt = contestService.findById(contestId);
            if (contestOpt.isEmpty()) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(Map.of("success", false, "message", "Contest not found"));
            }
            
            var contest = contestOpt.get();
            var contestState = contestStateManager.getContestState(contestId);
            
            return ResponseEntity.ok(Map.of(
                "success", true,
                "message", "Contest status retrieved successfully",
                "data", Map.of(
                    "contestId", contestId,
                    "title", contest.title(),
                    "code", contest.code(),
                    "status", contest.status(),
                    "realTimeStatus", contestState != null ? contestState.getStatus() : "UNKNOWN",
                    "isActive", contestStateManager.isContestActive(contestId),
                    "isEnded", contestStateManager.isContestEnded(contestId)
                )
            ));
            
        } catch (Exception e) {
            log.error("‚ùå Error getting status for contest {}: {}", contestId, e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(Map.of("success", false, "message", "Error getting contest status: " + e.getMessage()));
        }
    }
}